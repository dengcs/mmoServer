---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by dengcs.
--- DateTime: 2018/11/1 16:55
---
local mh_floor 	= math.floor
local tb_sort 	= table.sort

local poker_type = {}

-- 判断类型是否匹配
function poker_type.check_type(type, cards)
	local switch =
	{
		[POKER_TYPE_ONE] 		= poker_type.check_one,
		[POKER_TYPE_TWO] 		= poker_type.check_two,
		[POKER_TYPE_THREE] 		= poker_type.check_three,
		[POKER_TYPE_BOMB] 		= poker_type.check_bomb,
		[POKER_TYPE_KING] 		= poker_type.check_king,
		[POKER_TYPE_1STRAIGHT] 	= poker_type.check_1straight,
		[POKER_TYPE_2STRAIGHT] 	= poker_type.check_2straight,
		[POKER_TYPE_3STRAIGHT] 	= poker_type.check_3straight,
		[POKER_TYPE_3WITH1] 	= poker_type.check_3with1,
		[POKER_TYPE_3WITH2] 	= poker_type.check_3with2,
		[POKER_TYPE_4WITH1] 	= poker_type.check_4with1,
		[POKER_TYPE_4WITH21] 	= poker_type.check_4with21,
		[POKER_TYPE_4WITH22] 	= poker_type.check_4with22,
	}

	local fn = switch[type]
	if fn then
		return fn(cards)
	end

	return false
end

-- 检测牌的类型
function poker_type.test_type(cards)
	local len = #cards

	if len == 1 then
		if poker_type.check_one(cards) then
			return POKER_TYPE_ONE
		end
	elseif len == 2 then
		if poker_type.check_king(cards) then
			return POKER_TYPE_KING
		elseif poker_type.check_two(cards) then
			return POKER_TYPE_TWO
		end
	elseif len ==3 then
		if poker_type.check_three(cards) then
			return POKER_TYPE_THREE
		end
	elseif len == 4 then
		if poker_type.check_bomb(cards) then
			return POKER_TYPE_BOMB
		elseif poker_type.check_3with1(cards) then
			return POKER_TYPE_3WITH1
		end
	elseif len > 4 then
		if poker_type.check_1straight(cards) then
			return POKER_TYPE_1STRAIGHT
		elseif poker_type.check_2straight(cards) then
			return POKER_TYPE_2STRAIGHT
		elseif poker_type.check_3straight(cards) then
			return POKER_TYPE_3STRAIGHT
		elseif poker_type.check_3with1(cards) then
			return POKER_TYPE_3WITH1
		elseif poker_type.check_3with2(cards) then
			return POKER_TYPE_3WITH2
		elseif poker_type.check_4with1(cards) then
			return POKER_TYPE_4WITH1
		elseif poker_type.check_4with21(cards) then
			return POKER_TYPE_4WITH21
		elseif poker_type.check_4with22(cards) then
			return POKER_TYPE_4WITH22
		end
	end

	return 0
end

-- 检测牌是否有效
function poker_type.check_valid(card)
	if card < 1 then
		return false
	end

	if card > GLOBAL_POKER_MAX then
		return false
	end
	return true
end

-- 检查牌型是否单张
function poker_type.check_one(cards)
	local len = #cards
	if len == 1 then
		return true
	end
	return false
end

-- 检查牌型是否对子
function poker_type.check_two(cards)
	local len = #cards
	if len == 2 then
		local card1 = mh_floor(cards[1]/4)
		local card2 = mh_floor(cards[2]/4)
		if card1 == card2 then
			return true
		end
	end
	return false
end

-- 检查牌型是否3张
function poker_type.check_three(cards)
	local len = #cards
	if len == 3 then
		local card1 = mh_floor(cards[1]/4)
		local card2 = mh_floor(cards[2]/4)
		local card3 = mh_floor(cards[3]/4)
		if card1 == card2 and card2 == card3 then
			return true
		end
	end
	return false
end

-- 检查牌型是否炸弹
function poker_type.check_bomb(cards)
	local len = #cards
	if len == 4 then
		local card1 = mh_floor(cards[1]/4)
		local card2 = mh_floor(cards[2]/4)
		local card3 = mh_floor(cards[3]/4)
		local card4 = mh_floor(cards[4]/4)
		if card1 == card2 and card2 == card3 and card3 == card4 then
			return true
		end
	end
	return false
end

-- 检查牌型是否王炸
function poker_type.check_king(cards)
	local len = #cards
	if len == 2 then
		local king = GLOBAL_POKER_MAX - 2
		local card1 = mh_floor(cards[1]/4)
		local card2 = mh_floor(cards[2]/4)
		if card1 > king and card2 > king then
			return true
		end
	end
	return false
end

-- 检查牌型是否顺子
function poker_type.check_1straight(cards)
	local len = #cards
	if len > 4 then
		tb_sort(cards)
		local first_val = mh_floor(cards[1]/4) - 1
		local cur_val = 0
		for i, v in ipairs(cards) do
			cur_val = mh_floor(v/4)
			if (first_val + i) ~= cur_val then
				return false
			end
		end
		return true
	end
	return false
end

-- 检查牌型是否2连对
function poker_type.check_2straight(cards)
	local len = #cards
	if len > 5 then
		tb_sort(cards)

	end
	return false
end

-- 检查牌型是否3连对
function poker_type.check_3straight(cards)

end

-- 检查牌型是否3带1
function poker_type.check_3with1(cards)

end

-- 检查牌型是否3带2
function poker_type.check_3with2(cards)

end

-- 检查牌型是否4带1
function poker_type.check_4with1(cards)

end

-- 检查牌型是否4带2（带两单张）
function poker_type.check_4with21(cards)

end

-- 检查牌型是否4带2（带两对）
function poker_type.check_4with22(cards)

end

return poker_type